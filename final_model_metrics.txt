Model Summary:

Model: "model"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to
==================================================================================================
input_1 (InputLayer)            [(None, 1)]          0
__________________________________________________________________________________________________
input_2 (InputLayer)            [(None, 1)]          0
__________________________________________________________________________________________________
embedding (Embedding)           (None, 1, 15)        24735       input_1[0][0]
__________________________________________________________________________________________________
embedding_1 (Embedding)         (None, 1, 15)        35865       input_2[0][0]
__________________________________________________________________________________________________
flatten (Flatten)               (None, 15)           0           embedding[0][0]
__________________________________________________________________________________________________
flatten_1 (Flatten)             (None, 15)           0           embedding_1[0][0]
__________________________________________________________________________________________________
concatenate (Concatenate)       (None, 30)           0           flatten[0][0]
                                                                 flatten_1[0][0]
__________________________________________________________________________________________________
dense (Dense)                   (None, 128)          3968        concatenate[0][0]
__________________________________________________________________________________________________
dropout (Dropout)               (None, 128)          0           dense[0][0]
__________________________________________________________________________________________________
dense_1 (Dense)                 (None, 64)           8256        dropout[0][0]
__________________________________________________________________________________________________
dropout_1 (Dropout)             (None, 64)           0           dense_1[0][0]
__________________________________________________________________________________________________
dense_2 (Dense)                 (None, 32)           2080        dropout_1[0][0]
__________________________________________________________________________________________________
dense_4 (Dense)                 (None, 1)            33          dense_2[0][0]
==================================================================================================
Total params: 74,937
Trainable params: 74,937
Non-trainable params: 0

Model Architecture:
input_movies = keras.layers.Input(shape=[1])
embed_movies = keras.layers.Embedding(nmovie_id+1, 15)(input_movies)
movies_out = keras.layers.Flatten()(embed_movies)

input_users = keras.layers.Input(shape=[1])
embed_users = keras.layers.Embedding(nuser_id+1, 15)(input_users)
users_out = keras.layers.Flatten()(embed_users)

bias = keras.initializers.Constant(output_bias)

conc_layer = keras.layers.Concatenate()([movies_out, users_out])

dense1 = keras.layers.Dense(128,activation='relu', kernel_regularizer='l2')(conc_layer)

dropout1 = keras.layers.Dropout(rate=.6, seed=42)(dense1)

dense2 = keras.layers.Dense(64,activation='relu', kernel_regularizer='l2')(dropout1)

dropout2 = keras.layers.Dropout(rate=.5, seed=42)(dense2)

dense3 = keras.layers.Dense(32, activation='relu', kernel_regularizer='l2')(dropout2)

dropout3 = keras.layers.Dropout(rate=.4, seed=42)(dense3)

dense4 = keras.layers.Dense(16, activation='relu', kernel_regularizer='l2')(dropout3)

x_out = keras.layers.Dense(1, activation='relu', kernel_regularizer='l2', bias_initializer=bias)(dense3)

model = keras.Model([input_movies, input_users], x_out)

opt = tf.optimizers.Adam(learning_rate=.01)
model.compile(optimizer=opt, loss='mean_squared_error', metrics = keras.metrics.RootMeanSquaredError())

Final Model Call:

callback = keras.callbacks.EarlyStopping(monitor='val_root_mean_squared_error',
                                        min_delta=.001,
                                        patience=30,
                                        mode="auto",
                                        restore_best_weights=True)

output = model.fit([X_train.movie, X_train.user],
                    X_train.rating_score,
                    batch_size=len(X_train),
                    epochs=100,
                    validation_split=.2,
                    callbacks=[callback])

Final validation RMSE: .8396
